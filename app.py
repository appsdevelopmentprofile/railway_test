# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nMK2ERmb54He8lpJd4xqTXuQmXUE1Soy

This is the document that will host the front end of the demo for the full solution. It starts working as ipynb for fixing (as it has the assistance of Gemini fixer) and demostration (as it can get the text and results added in sections).

Once it is ready to be run, it will be downloaded as a Pythin (.py) file and be included into the Github repository. It is done in this way so the Github is not oversaturated and we are able to use it for multiple deployments.

# Module 1 - DocIntelligence with OCR Tesseract libraries
"""
# Module 1 - DocIntelligence with OCR Tesseract libraries


import os
import tensorflow as tf
import streamlit as st
from streamlit_option_menu import option_menu
from PIL import Image
import pytesseract
import tempfile
import fitz  # PyMuPDF for handling PDFs
import requests
import streamlit_authenticator as stauth
import pickle
from pathlib import Path






# Set page configuration at the start
st.set_page_config(
    page_title="Allnorth Consultants - RFO Central Application",
    layout="wide",
    page_icon="üßë‚Äç‚öïÔ∏è"
)


# --- USER AUTHENTICATION ---

# Define the credentials for a single user without hashing
credentials = {
    "usernames": {
        "rfo_central": {
            "name": "RFO Central",
            "password": "1234"  # Plain-text password
        }
    }
}

authenticator = stauth.Authenticate(credentials, "cookie_name", "key", 30)


# Authentication check
name, authentication_status, username = authenticator.login("Login", "main")

if authentication_status is False:
    st.error("Username/password is incorrect")

elif authentication_status is None:
    st.warning("Please enter your username and password")

elif authentication_status:
    # Sidebar and main app if logged in
    authenticator.logout("Logout", "sidebar")
    st.sidebar.title(f"Welcome {name}")
    # Rest of your sidebar and main code here
  
    with st.sidebar:
        selected = option_menu(
            'Multiple AI Improvements - RFO Central Application',
            [
                "Doc Intelligence",
                "Predictive Analytics for Operational Planning",
                "Real-Time Fault Monitoring - Real Time Field Tech Assistance",
                "Project Completion Reporting for Oil and Gas"
            ],
            menu_icon='building',
            icons=['gear-fill', 'factory', 'bar-chart-line-fill', 'clipboard-data', 'truck', 'diagram-3-fill'],
            default_index=0
        )
    
    # Create temp directory if it doesn't exist
    os.makedirs("temp", exist_ok=True)
    
    # Doc Intelligence Section
    if selected == 'Doc Intelligence':
        st.title("Doc Intelligence with CNNs")
    
        # File uploader for multiple files (images, PDFs)
        uploaded_files = st.file_uploader("Upload your documents (images, PDFs)", type=['png', 'jpg', 'jpeg', 'pdf'], accept_multiple_files=True)
    
        # OneDrive Document Upload
        st.title("OneDrive Document Uploader")
        one_drive_upload_url = st.text_input("Enter your OneDrive Upload URL:", "https://<Your OneDrive Upload URL Here>")
        uploaded_file = st.file_uploader("Choose a file to upload to OneDrive", type=['pdf', 'jpg', 'jpeg', 'png'])
    
        if uploaded_file and one_drive_upload_url and st.button("Upload to OneDrive"):
            temp_file_path = os.path.join("temp", uploaded_file.name)
            with open(temp_file_path, "wb") as f:
                f.write(uploaded_file.getbuffer())
            with open(temp_file_path, "rb") as f:
                files = {'file': f}
                response = requests.post(one_drive_upload_url, files=files)
            if response.status_code == 200:
                st.success("Upload successful!")
            else:
                st.error("Upload failed. Please check the OneDrive link and try again.")
            os.remove(temp_file_path)
    
        # Process each uploaded file for Document Intelligence
        if uploaded_files:
            for uploaded_file in uploaded_files:
                st.write(f"Processing: {uploaded_file.name}")
    
                with tempfile.NamedTemporaryFile(delete=False) as temp_file:
                    temp_file.write(uploaded_file.read())
                    temp_file_path = temp_file.name
    
                # Handle image files
                if uploaded_file.type.startswith("image/"):
                    image = Image.open(temp_file_path)
                    st.image(image, caption="Uploaded Image", use_column_width=True)
                    if st.button("Extract Text from Image", key=f"extract_{uploaded_file.name}_{uploaded_file.size}"):
                        extracted_text = pytesseract.image_to_string(image)
                        st.subheader("Extracted Text:")
                        st.write(extracted_text if extracted_text else "No text found.")
    
                # Handle PDF files
                elif uploaded_file.type == "application/pdf":
                    doc_text = ""
                    pdf = fitz.open(temp_file_path)
                    for page_num in range(pdf.page_count):
                        page = pdf[page_num]
                        doc_text += page.get_text("text")
                    st.subheader("Extracted Text from PDF:")
                    st.write(doc_text if doc_text else "No text found in PDF.")
                    pdf.close()
    
                os.remove(temp_file_path)
    
        # Placeholder for document content analysis
        if st.button('Analyze Document Content'):
            doc_intelligence = "Feature extraction and analysis results will be displayed here."
            st.success(doc_intelligence)
    
    
   

